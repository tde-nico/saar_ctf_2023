"""
Django settings for djangobells project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from django.http import HttpRequest
import requests
from urllib.parse import unquote
import secrets

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-wx5n@&x8cdgsyq%9#ah8@xt43$mxq)7$=h9u)3l*lwqq-+7w*-'
try:
    with open(BASE_DIR / 'secret.txt', 'r') as f:
        SECRET_KEY = f.read().strip()
except FileNotFoundError:
    SECRET_KEY = secrets.token_urlsafe(42)
    with open(BASE_DIR / 'secret.txt', 'w') as f:
        f.write(SECRET_KEY)


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]


def get_api_host(request: HttpRequest):
    API_SERVER = "" # Set this if you have an API Server
    if API_SERVER != "":
        return API_SERVER
    else:
        return "127.0.0.1:8000"
    
def make_api_call_params(request,endpoint, params):
    
    api = get_api_host(request)
    url = "http://" + api + "/api/" + endpoint + "?" + params
    if ".." in url or "%72%65%70%6f%72%74" in url or "%25%37%32%25%36%35%25%37%30%25%36%66%25%37%32%25%37%34" in url:
        return "SAAR{SucaSucaSucaSucaSucaSucaSucaSuca}"
    r = requests.get(unquote(url))
    return r.text


def make_api_call_token(request,endpoint, post_id, pass_token):
    api = get_api_host(request)
    url = "http://" + api + "/api/read/" + post_id + "/" + pass_token + "/" + endpoint
    if ".." in url or "report" in url or "%72%65%70%6f%72%74" in url or "%25%37%32%25%36%35%25%37%30%25%36%66%25%37%32%25%37%34" in url:
        return "SAAR{SucaSucaSucaSucaSucaSucaSucaSuca}"
    r = requests.get(unquote(url))
    return r.text

def make_api_call_post_id(request,endpoint, post_id):
    api = get_api_host(request)
    url = "http://" + api + "/api/" + post_id + "/" + endpoint
    if ".." in url or "report" in url or "%72%65%70%6f%72%74" in url or "%25%37%32%25%36%35%25%37%30%25%36%66%25%37%32%25%37%34" in url:
        return "SAAR{SucaSucaSucaSucaSucaSucaSucaSuca}"
    r = requests.get(unquote(url))
    return r.text

def make_api_call(request,endpoint):
    api = get_api_host(request)
    url = "http://" + api + "/api/" + endpoint
    if ".." in url:
        return "SAAR{SucaSucaSucaSucaSucaSucaSucaSuca}"
    r = requests.get(unquote(url))
    return r.text
    

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangobells.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangobells.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
